#ifndef PQ_PERSISTENT_HH
#define PQ_PERSISTENT_HH
#include "str.hh"
#include "string.hh"
#include "pqdbpool.hh"
#include <tamer/tamer.hh>
#if HAVE_POSTGRESQL_LIBPQ_FE_H
#include <postgresql/libpq-fe.h>
#elif HAVE_LIBPQ_FE_H
#include <libpq-fe.h>
#endif

#include "leveldb/db.h"

namespace pq {
class Server;

// [Log generation]
// TODO: Implement Dummy class that prints log of each functions
 
class PersistentStore {
  public:
    typedef std::pair<String,String> Result;
    typedef std::vector<Result> ResultSet;

    virtual ~PersistentStore() { }

    virtual void put(Str key, Str value, tamer::event<> done) = 0;
    virtual void erase(Str key, tamer::event<> done) = 0;
    virtual void get(Str key, tamer::event<String> done) = 0;
    virtual void scan(Str first, Str last, tamer::event<ResultSet> done) = 0;
    virtual void flush() = 0;

    virtual void run_monitor(Server& server) = 0;
};

#if HAVE_LIBLEVELDB

class LevelDBStore : public pq::PersistentStore {
  public:
    LevelDBStore(const DBPoolParams& params);
    ~LevelDBStore();

    tamed virtual void put(Str key, Str value, tamer::event<> done);
    tamed virtual void erase(Str key, tamer::event<> done);
    tamed virtual void get(Str key, tamer::event<String> done);
    tamed virtual void scan(Str first, Str last, tamer::event<ResultSet> done);
    virtual void flush();

    virtual void run_monitor(Server& server);

  private:

    leveldb::DB DB_leveldb;
    leveldb::WriteOptions WriteOptions_leveldb;
    leveldb::ReadOptions ReadOptions_leveldb;

    DBPoolParams params_;
    DBPool* pool_;
};

#endif

#if HAVE_LIBPQ

class PostgresStore : public pq::PersistentStore {
  public:
    PostgresStore(const DBPoolParams& params);
    ~PostgresStore();

    tamed virtual void put(Str key, Str value, tamer::event<> done);
    tamed virtual void erase(Str key, tamer::event<> done);
    tamed virtual void get(Str key, tamer::event<String> done);
    tamed virtual void scan(Str first, Str last, tamer::event<ResultSet> done);
    virtual void flush();

    void connect();
    virtual void run_monitor(Server& server);

  private:
    enum { pg_update = 0, pg_delete = 1 };

    DBPoolParams params_;
    DBPool* pool_;
    PGconn* monitor_;

    tamed void monitor_db(Server& server);
};

#endif

}

#endif
