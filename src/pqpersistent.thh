#ifndef PQ_PERSISTENT_HH
#define PQ_PERSISTENT_HH
#include "str.hh"
#include "string.hh"
#include "pqdbpool.hh"
#include <tamer/tamer.hh>
#if HAVE_POSTGRESQL_LIBPQ_FE_H
#include <postgresql/libpq-fe.h>
#elif HAVE_LIBPQ_FE_H
#include <libpq-fe.h>
#endif

#define PrintLog 1

#define AGGREGATION_ON 1    // 1 for aggregation, 0 for baseline KVSSD
#define NUM_USERS 10000     // you need to set # of users for aggregation
#define Prefix_P 0x80000000 // value for covering KV-SSD iterator limitation

#define HAVE_LIBKVSDB   1
#define HAVE_LIBLEVELDB 1
#define HAVE_LIBROCKSDB 1

#if HAVE_LIBKVSDB
#include "kvs_go_api.h"
#endif
#if HAVE_LIBLEVELDB
#include "leveldb/db.h"
#endif
#if HAVE_LIBROCKSDB
#include "rocksdb/db.h"
#endif

namespace pq {
class Server;
 
class PersistentStore {
  public:
    typedef std::pair<String,String> Result;
    typedef std::vector<Result> ResultSet;

    virtual ~PersistentStore() { }

    virtual void put(Str key, Str value, tamer::event<> done) = 0;
    virtual void erase(Str key, tamer::event<> done) = 0;
    virtual void get(Str key, tamer::event<String> done) = 0;
    virtual void scan(Str first, Str last, tamer::event<ResultSet> done) = 0;
    virtual void flush() = 0;

    virtual void run_monitor(Server& server) = 0;
};

#if HAVE_LIBKVSDB
class KVSDBStore : public pq::PersistentStore {
  public:
    KVSDBStore();
    ~KVSDBStore();

    tamed virtual void put(Str key, Str value, tamer::event<> done);
    tamed virtual void erase(Str key, tamer::event<> done);
    tamed virtual void get(Str key, tamer::event<String> done);
    tamed virtual void scan(Str first, Str last, tamer::event<ResultSet> done);
    virtual void flush();

    virtual void run_monitor(Server& server);
  
    KVSDB kvsdb;
    AGHandler handler;
};
#endif

#if HAVE_LIBLEVELDB
class LevelDBStore : public pq::PersistentStore {
  public:
    LevelDBStore();
    ~LevelDBStore();

    tamed virtual void put(Str key, Str value, tamer::event<> done);
    tamed virtual void erase(Str key, tamer::event<> done);
    tamed virtual void get(Str key, tamer::event<String> done);
    tamed virtual void scan(Str first, Str last, tamer::event<ResultSet> done);
    virtual void flush();

    virtual void run_monitor(Server& server);
    
    leveldb::DB* db;
};
#endif

#if HAVE_LIBROCKSDB
class RocksDBStore : public pq::PersistentStore {
  public:
    RocksDBStore();
    ~RocksDBStore();

    tamed virtual void put(Str key, Str value, tamer::event<> done);
    tamed virtual void erase(Str key, tamer::event<> done);
    tamed virtual void get(Str key, tamer::event<String> done);
    tamed virtual void scan(Str first, Str last, tamer::event<ResultSet> done);
    virtual void flush();

    virtual void run_monitor(Server& server);
    
    rocksdb::DB* db;
};
#endif

#if HAVE_LIBPQ

class PostgresStore : public pq::PersistentStore {
  public:
    PostgresStore(const DBPoolParams& params);
    ~PostgresStore();

    tamed virtual void put(Str key, Str value, tamer::event<> done);
    tamed virtual void erase(Str key, tamer::event<> done);
    tamed virtual void get(Str key, tamer::event<String> done);
    tamed virtual void scan(Str first, Str last, tamer::event<ResultSet> done);
    virtual void flush();

    void connect();
    virtual void run_monitor(Server& server);

  private:
    enum { pg_update = 0, pg_delete = 1 };

    DBPoolParams params_;
    DBPool* pool_;
    PGconn* monitor_;

    tamed void monitor_db(Server& server);
};

#endif

}

#endif
